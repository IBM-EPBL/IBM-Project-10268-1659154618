# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J0Q9mH6BWzEA3uhH_bIbO2IaqRyWi6RM

Team id :PNT2022TMID04889


AI Powered Nutrition Analyzer For Fitness Enthusiasts



Download dataset here [dataset](https://drive.google.com/file/d/1B57YP6XC0yOaS36njI3yjDnfUtYzHtlB/view?usp=share_link)

**Data Collection**
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip '/content/drive/MyDrive/IBM/Dataset.zip'

"""**Image Preprocessing**

Import The ImageDataGenerator Library
"""

from keras.preprocessing.image import ImageDataGenerator

"""Configure ImageDataGenerator Class"""

train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

"""Apply Image DataGenerator Functionality To Trainset And Testset"""

x_train = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/IBM/Dataset/TRAIN_SET',target_size=(64,64),batch_size=5,color_mode='rgb',class_mode='sparse')

x_test = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/IBM/Dataset/TEST_SET',target_size=(64,64),batch_size=5,color_mode='rgb',class_mode='sparse')

print(x_train.class_indices)

print(x_test.class_indices)

from collections import Counter as c
c(x_train .labels)

"""**Model Building**

Importing The Model Building Libraries
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential 
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense,Flatten
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dropout

"""Initializing The Model

"""

model = Sequential()

"""Adding CNN Layers

"""

# Initializing the CNN
classifier = Sequential()

# First convolution layer and pooling
classifier.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Second convolution layer and pooling
classifier.add(Conv2D(32, (3, 3), activation='relu'))

# input_shape is going to be the pooled feature maps from the previous convolution layer
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Flattening the layers
classifier.add(Flatten())

"""Adding Dense Layers

"""

classifier.add(Dense(units=128, activation='relu'))
classifier.add(Dense(units=5, activation='softmax'))

#summary of our model
classifier.summary()

"""Configure The Learning Process

"""

# Compiling the CNN
# categorical_crossentropy for more than 2
classifier.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

"""Train The Model

"""

#Fitting the model
classifier.fit_generator(generator=x_train,steps_per_epoch = len(x_train),epochs=20, validation_data=x_test,validation_steps = len(x_test))

"""Save The Model

"""

classifier.save('/content/drive/MyDrive/IBM/Flask/uploads/nutrition.h5')

"""Test The Model

"""

#Predict the results
from tensorflow.keras.models import load_model
from keras.preprocessing import image
model = load_model("/content/drive/MyDrive/IBM/Flask/uploads/nutrition.h5")

from tensorflow.keras.utils import img_to_array
from tensorflow.keras.utils import load_img
#loading of the image
img = load_img(r'/content/drive/MyDrive/IBM/Flask/Sample_Images/watermelon1.png',grayscale=False,target_size= (64,64))
#image to array
x = img_to_array(img)
#changing the shape
x = np.expand_dims(x,axis = 0)
predict_x=model.predict(x) 
classes_x=np.argmax(predict_x,axis=-1)
classes_x

index=['APPLES', 'BANANA', 'ORANGE','PINEAPPLE','WATERMELON']
result=str(index[classes_x[0]])
result